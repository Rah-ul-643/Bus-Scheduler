# execute_sql_file.py
# This script connects to a PostgreSQL database and executes all SQL commands
# from a specified .sql file. It's designed to run raw SQL files, like
# the one generated by 'generate_static_data.sql.py'.

import psycopg2
import sys
import os

# --- CONFIGURATION ---
# 1. Set the path to your SQL file
SQL_FILE_PATH = '../generated_sql/static_data_trained_routes.sql'

# 2. Replace with your actual PostgreSQL connection details
DB_CONFIG = {
    "host": "localhost",
    "database": "best_transit",
    "user": "postgres",
    "password": "my_secure_password",
    "port": "5432"
}

def execute_sql_from_file(file_path):
    """
    Connects to the database, reads an SQL file, and executes its content.

    Args:
        file_path (str): The relative path to the .sql file to be executed.
    """
    conn = None
    cursor = None
    try:
        # Check if the file exists before attempting to connect
        if not os.path.exists(file_path):
            print(f"ERROR: The file '{file_path}' was not found.")
            sys.exit(1)

        # Read the entire SQL file into a string
        print(f"--- Reading SQL commands from '{file_path}' ---")
        with open(file_path, 'r', encoding='utf-8') as f:
            sql_commands = f.read()
        print("SQL file read successfully.")

        # Connect to the PostgreSQL database
        print("\n--- Connecting to PostgreSQL database ---")
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        print("Database connection successful.")

        # Execute the SQL commands
        print("Executing SQL commands...")
        cursor.execute(sql_commands)

        # Commit the transaction
        conn.commit()
        print("--- Successfully executed SQL script and committed changes. ---")

    except psycopg2.Error as e:
        print(f"\nERROR: Database error occurred: {e}")
        # Roll back the transaction on error
        if conn:
            conn.rollback()
            print("Transaction has been rolled back.")
        sys.exit(1)
        
    except IOError as e:
        print(f"\nERROR: Could not read the file at '{file_path}': {e}")
        sys.exit(1)

    except Exception as e:
        print(f"\nAn unexpected error occurred: {e}")
        if conn:
            conn.rollback()
        sys.exit(1)

    finally:
        # Ensure the connection is closed
        if cursor:
            cursor.close()
        if conn:
            conn.close()
            print("Database connection closed.")

if __name__ == '__main__':
    # Execute the script with the hardcoded file path
    execute_sql_from_file(SQL_FILE_PATH)
